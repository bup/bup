.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "bup-memtest" "1" "0.33.3" "Bup 0.33.3" ""
.hy
.SH NAME
.PP
bup-memtest - test bup memory usage statistics
.SH SYNOPSIS
.PP
bup memtest [options\&...]
.SH DESCRIPTION
.PP
\f[V]bup memtest\f[R] opens the list of pack indexes in your bup
repository, then searches the list for a series of nonexistent objects,
printing memory usage statistics after each cycle.
.PP
Because of the way Unix systems work, the output will usually show a
large (and unchanging) value in the VmSize column, because mapping the
index files in the first place takes a certain amount of virtual address
space.
However, this virtual memory usage is entirely virtual; it doesn\[cq]t
take any of your RAM.
Over time, bup uses \f[I]parts\f[R] of the indexes, which need to be
loaded from disk, and this is what causes an increase in the VmRSS
column.
.SH OPTIONS
.TP
-n, --number=\f[I]number\f[R]
set the number of objects to search for during each cycle (ie.
before printing a line of output)
.TP
-c, --cycles=\f[I]cycles\f[R]
set the number of cycles (ie.
the number of lines of output after the first).
The first line of output is always 0 (ie.
the baseline before searching for any objects).
.TP
--ignore-midx
ignore any \f[V].midx\f[R] files created by \f[V]bup midx\f[R].
This allows you to compare memory performance with and without using
midx.
.TP
--existing
search for existing objects instead of searching for random nonexistent
ones.
This can greatly affect memory usage and performance.
Note that most of the time, \f[V]bup save\f[R] spends most of its time
searching for nonexistent objects, since existing ones are probably in
unmodified files that we won\[cq]t be trying to back up anyway.
So the default behaviour reflects real bup performance more accurately.
But you might want this option anyway just to make sure you haven\[cq]t
made searching for existing objects much worse than before.
.SH EXAMPLES
.IP
.nf
\f[C]
$ bup memtest -n300 -c5
PackIdxList: using 1 index.
               VmSize      VmRSS     VmData      VmStk 
        0    20824 kB    4528 kB    1980 kB      84 kB 
      300    20828 kB    5828 kB    1984 kB      84 kB 
      600    20828 kB    6844 kB    1984 kB      84 kB 
      900    20828 kB    7836 kB    1984 kB      84 kB 
     1200    20828 kB    8736 kB    1984 kB      84 kB 
     1500    20828 kB    9452 kB    1984 kB      84 kB 

$ bup memtest -n300 -c5 --ignore-midx
PackIdxList: using 361 indexes.
               VmSize      VmRSS     VmData      VmStk 
        0    27444 kB    6552 kB    2516 kB      84 kB 
      300    27448 kB   15832 kB    2520 kB      84 kB 
      600    27448 kB   17220 kB    2520 kB      84 kB 
      900    27448 kB   18012 kB    2520 kB      84 kB 
     1200    27448 kB   18388 kB    2520 kB      84 kB 
     1500    27448 kB   18556 kB    2520 kB      84 kB 
\f[R]
.fi
.SH DISCUSSION
.PP
When optimizing bup indexing, the first goal is to keep the VmRSS
reasonably low.
However, it might eventually be necessary to swap in all the indexes,
simply because you\[cq]re searching for a lot of objects, and this will
cause your RSS to grow as large as VmSize eventually.
.PP
The key word here is \f[I]eventually\f[R].
As long as VmRSS grows reasonably slowly, the amount of disk activity
caused by accessing pack indexes is reasonably small.
If it grows quickly, bup will probably spend most of its time swapping
index data from disk instead of actually running your backup, so backups
will run very slowly.
.PP
The purpose of \f[V]bup memtest\f[R] is to give you an idea of how fast
your memory usage is growing, and to help in optimizing bup for better
memory use.
If you have memory problems you might be asked to send the output of
\f[V]bup memtest\f[R] to help diagnose the problems.
.PP
Tip: try using \f[V]bup midx -a\f[R] or \f[V]bup midx -f\f[R] to see if
it helps reduce your memory usage.
.PP
Trivia: index memory usage in bup (or git) is only really a problem when
adding a large number of previously unseen objects.
This is because for each object, we need to absolutely confirm that it
isn\[cq]t already in the database, which requires us to search through
\f[I]all\f[R] the existing pack indexes to ensure that none of them
contain the object in question.
In the more obvious case of searching for objects that \f[I]do\f[R]
exist, the objects being searched for are typically related in some way,
which means they probably all exist in a small number of packfiles, so
memory usage will be constrained to just those packfile indexes.
.PP
Since git users typically don\[cq]t add a lot of files in a single run,
git doesn\[cq]t really need a program like \f[V]bup midx\f[R].
bup, on the other hand, spends most of its time backing up files it
hasn\[cq]t seen before, so its memory usage patterns are different.
.SH SEE ALSO
.PP
\f[V]bup-midx\f[R](1)
.SH BUP
.PP
Part of the \f[V]bup\f[R](1) suite.
.SH AUTHORS
Avery Pennarun <apenwarr@gmail.com>.
